#!/bin/bash

if [ -z ${DABL_ADMIN_TOKEN+x} ]; then
  echo "Please provide your DABL admin token (will set DABL_ADMIN_TOKEN for current shell session):";
  read -s TOKEN
  echo $TOKEN
  export DABL_ADMIN_TOKEN=$TOKEN
fi

AUTH_HEADER="Authorization: Bearer $DABL_ADMIN_TOKEN"


# ================
# ===== MAIN =====
# ================

function main {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Please provide a sub-command: workspace|project|ledger"
    exit 1
  fi

  CMD=$1
  shift

  case $CMD in

    w|workspace)
      workspace $@
      ;;
    p|project)
      project $@
      ;;
    l|ledger)
      ledger $@
      ;;
    *)
      echo "dabl <command>"
      echo "  commands are:"
      echo "    w|workspace - get workspace"
      echo "    p|projects - get projects"
      ;;
  esac
}


# =====================
# ===== WORKSPACE =====
# =====================

function workspace {
  if [ "$1" == "" ]; then
    echo "Please provide a sub-command: get|del"
    exit 1
  fi

  CMD=$1
  shift

  case $CMD in
    get)
      getWorkspace
      ;;
    del)
      deleteFile $@
      ;;
    *)
      echo "dabl workspace <sub-command>"
      echo "  sub-commands are:"
      echo "    get - get workspace"
      echo "    del - delete file"
      ;;
  esac
}

function getWorkspace {
  echo "Getting workspace"
  curl -s -H "$AUTH_HEADER" https://api.projectdabl.com/api/site/workspace | jq
}

function deleteFile {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl workspace del <file-name>"
    exit 1
  fi

  echo "Deleting file $1"
  REQUEST='{ "fileName": "'$1'" }'
  curl -s -H "$AUTH_HEADER" -d "$REQUEST" -X DELETE https://api.projectdabl.com/api/site/workspace | jq
}


# ===================
# ===== PROJECT =====
# ===================

function project {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Please provide a sub-command: get|add|delete"
    exit 1
  fi

  CMD=$1
  shift

  case $CMD in
    get)
      getProjects
      ;;
    add)
      addProject $@
      ;;
    del)
      deleteProject $@
      ;;
    *)
      echo "dabl projects <sub-command>"
      echo "  sub-commands are:"
      echo "    get - get projects"
      echo "    add - add project"
      echo "    del - delete project"
      ;;
  esac
}

function getProjects {
  echo "Getting projects"
  curl -s -H "$AUTH_HEADER" https://api.projectdabl.com/api/site/projects | jq
}

function addProject {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl project add <project-name>"
    exit 1
  fi

  echo "Adding project $1"
  REQUEST='{ "projectName": "'$1'" }'
  curl -s -H "$AUTH_HEADER" -d "$REQUEST" https://api.projectdabl.com/api/site/projects | jq
}

function deleteProject {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl project del <project-id>"
    exit 1
  fi

  echo "Deleting project $1"
  curl -s -H "$AUTH_HEADER" -X DELETE https://api.projectdabl.com/api/site/projects/$1 | jq
}


# ==================
# ===== LEDGER =====
# ==================

function ledger {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Please provide a sub-command: get|add|del"
    exit 1
  fi

  CMD=$1
  shift

  case $CMD in
    get)
      getLedgers
      ;;
    add)
      addLedger $@
      ;;
    del)
      deleteLedger $@
      ;;
    upload)
      upload $@
      ;;
    party)
      party $@
      ;;
    contracts)
      getContracts $@
      ;;
    models)
      getModels $@
      ;;
    token)
      getAdminToken $@
      ;;
    *)
      echo "dabl ledger <sub-command>"
      echo "  sub-commands are:"
      echo "    get - get ledgers"
      echo "    add - add ledger"
      echo "    del - delete ledger"
      ;;
  esac
}

function getLedgers {
  echo "Getting ledgers"
  curl -s -H "$AUTH_HEADER" https://api.projectdabl.com/api/site/ledgers | jq
}

function addLedger {
  if [ "$1" == "" ] || [ "$2" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl ledger add <project-id> <ledger-name>"
    exit 1
  fi

  echo "Adding ledger $2 to project $1"
  REQUEST='{ "projectId": "'$1'", "ledgerName": "'$2'" }'
  echo $REQUEST
  curl -s -H "$AUTH_HEADER" -d "$REQUEST" https://api.projectdabl.com/api/site/ledgers | jq
}

function deleteLedger {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl ledger del <ledger-id>"
    exit 1
  fi

  echo "Deleting ledger $1"
  curl -s -H "$AUTH_HEADER" -X DELETE https://api.projectdabl.com/api/site/ledger/$1 | jq
}

function getAdminToken {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl ledger token <ledger-id>"
    exit 1
  fi

  curl -s -H "$AUTH_HEADER" -X POST https://api.projectdabl.com/api/ledger/$1/admin/user_grants | jq -r '.access_token'
}

function getContracts {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl ledger contracts <ledger-id>"
    exit 1
  fi

  echo "Getting contracts for ledger $1"
  # FIXME: needs party token, not ledger admin
  HEADER="Authorization: Bearer $(getAdminToken $1)"
  curl -s -H "$HEADER" https://api.projectdabl.com/data/$1/contracts | jq
}

function getModels {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl ledger models <ledger-id>"
    exit 1
  fi

  echo "Getting models for ledger $1"
  HEADER="Authorization: Bearer $(getAdminToken $1)"
  curl -s -H "$HEADER" https://api.projectdabl.com/api/ledger/$1/models | jq
}

function upload {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl ledger upload <ledger-id> <filename>"
    exit 1
  fi

  echo "Uploading $2 to ledger $1"

  BINARY=$(cat $2 | base64)
  FILE="data:application/octet-stream;base64,$BINARY"
  FILENAME=$(basename $2)
  REQUEST='{ "file": "'$FILE'", "fileName": "'$FILENAME'" }'
  HEADER="Authorization: Bearer $(getAdminToken $1)"
  TMP=$(mktemp)
  exec 3>"$TMP"
  echo $REQUEST > $TMP
  curl -s -H "$HEADER" -d @$TMP https://api.projectdabl.com/api/ledger/$1/upload_dar | jq
  rm "$TMP"
}


# =================
# ===== PARTY =====
# =================

function party {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Please provide a sub-command: get|add"
    exit 1
  fi

  CMD=$1
  shift

  case $CMD in
    get)
      getParties $@
      ;;
    add)
      addParty $@
      ;;
    *)
      echo "dabl ledger party <sub-command>"
      echo "  sub-commands are:"
      echo "    get - get parties"
      echo "    add - add party"
      ;;
  esac
}

function getParties {
  if [ "$1" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl ledger party get <ledger-id>"
    exit 1
  fi

  echo "Getting parties for ledger $1"
  HEADER="Authorization: Bearer $(getAdminToken $1)"
  curl -s -H "$HEADER" https://api.projectdabl.com/api/ledger/$1/parties | jq
}

function addParty {
  if [ "$1" == "" ] || [ "$2" == "" ]; then
    echo "Invalid arguments: $@"
    echo "Usage: dabl ledger party add <ledger-id> <party-name>"
    exit 1
  fi

  echo "Adding party $2 to ledger $1"
  REQUEST='{ "partyName": "'$2'" }'
  HEADER="Authorization: Bearer $(getAdminToken $1)"
  curl -s -H "$HEADER" -d "$REQUEST" https://api.projectdabl.com/api/ledger/$1/parties | jq
}

main $@