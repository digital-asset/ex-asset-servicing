module DA.Finance.Distribution.Distribution where

import DA.Finance.Asset
import DA.Finance.Issuance.Issuance
import DA.Finance.Types
import DA.List (head)
import DA.Next.Set (empty)

template DistributionRequest
  with
    depository : Party
    issuer : Party
    agent : Party
    label : Text
    issuanceDepositCid : ContractId AssetDeposit
    asset : Asset
    issuerAccountAtAgent : Account
  where
    signatory depository, issuer
    observer agent

    controller agent can
      nonconsuming RequestSubscription : [ContractId SubscriptionRequest]
        with
          investors : [Party]
          price : Asset
        do
          mapA (\investor -> create SubscriptionRequest with ..) investors

      nonconsuming InstructDistribution : [ContractId SettlementInstruction]
        with
          subscriptionResponseCids : [ContractId SubscriptionResponse]
          warrantCid : ContractId Warrant
          agentAccountAtAgent : Account
          agentAccountAtDepository : Account
        do
          subscriptionResponses <- mapA fetch subscriptionResponseCids

          let
            quantities = map (.quantity) subscriptionResponses
            totalQuantity = sum quantities
            investors = map (.investor) subscriptionResponses

          exercise warrantCid Warrant_SetObservers with ctrl = agent; newObservers = [ depository, agent, issuer ] <> investors
          depositCid <- create AssetDeposit with account = agentAccountAtAgent; observers = empty; asset = asset with quantity = totalQuantity
          subscribedDepositCid <- head <$> exercise issuanceDepositCid AssetDeposit_Split with quantities = [ totalQuantity ]
          subscribedDeposit <- fetch subscribedDepositCid
          agentDepositCids <- exercise depositCid AssetDeposit_Split with quantities
          let
            responseDepositPairs = zip subscriptionResponses agentDepositCids
            createSettlementInstructions ((sr, agentDepositCid) : (SubscriptionResponse, ContractId AssetDeposit)) =
              do
                investorDeposit <- fetch sr.depositCid
                agentDeposit <- fetch agentDepositCid
                assertMsg "Investor deposit doesn't match price asset" $ investorDeposit.asset.id.label == sr.price.id.label
                assertMsg "Investor deposit doesn't match cost" $ investorDeposit.asset.quantity == sr.quantity * sr.price.quantity
                let
                  delivery = SettlementInstruction with fromDeposit = agentDeposit; fromDepositCid = agentDepositCid; toAccount = investorDeposit.account; settled = False; ..
                  payment = SettlementInstruction with fromDeposit = investorDeposit; fromDepositCid = sr.depositCid; toAccount = issuerAccountAtAgent; settled = False; ..
                pure [ delivery, payment ]
            distributionInstruction = SettlementInstruction with fromDeposit = subscribedDeposit; fromDepositCid = subscribedDepositCid; toAccount = agentAccountAtDepository; settled = False; ..
          settlementInstructions <- concat <$> mapA createSettlementInstructions responseDepositPairs
          mapA create (distributionInstruction :: settlementInstructions)

template SubscriptionRequest
  with
    depository : Party
    issuer : Party
    agent : Party
    investor : Party
    label : Text
    asset : Asset
    price : Asset
  where
    signatory depository, issuer, agent
    observer investor

    controller investor can
      RespondSubscription : ContractId SubscriptionResponse
        with
          quantity : Decimal
          depositCid : ContractId AssetDeposit
        do
          create SubscriptionResponse with ..

template SubscriptionResponse
  with
    depository : Party
    issuer : Party
    agent : Party
    investor : Party
    label : Text
    asset : Asset
    price : Asset
    quantity : Decimal
    depositCid : ContractId AssetDeposit
  where
    signatory depository, issuer, agent, investor

    controller depository, agent can
      DeleteSubscriptionResponse : ()
        do pure ()

template SettlementInstruction
  with
    depository : Party
    issuer : Party
    agent : Party
    label : Text
    fromDeposit : AssetDeposit
    fromDepositCid : ContractId AssetDeposit
    toAccount : Account
    settled : Bool
  where
    signatory depository, issuer, agent

    controller depository can
      SettleInstruction : ContractId AssetDeposit
        do
          fromDeposit <- fetch fromDepositCid
          archive fromDepositCid
          create this with settled = True
          create fromDeposit with account = toAccount
