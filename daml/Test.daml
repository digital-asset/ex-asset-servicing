daml 1.2
module Test where

import DA.Date
import Lifecycle.Agreement
import Lifecycle.EqACBRC qualified as EqACBRCL
import Lifecycle.EqOption qualified as EqOptionL
import Lifecycle.EqStock qualified as EqStockL
import RefData.EqACBRC
import RefData.EqOption
import RefData.EqStock
import TradeStore.Interface as TradeStore
import Types

data PartySetup = PartySetup
  with
    pb  : Party
    csd   : Party
    ib   : Party
  deriving (Eq, Show)

partySetup : Scenario PartySetup
partySetup = do
  pb <- getParty "PB"
  csd <- getParty "CSD"
  ib <- getParty "IB"
  return PartySetup with ..

data InstrumentSetup = InstrumentSetup
  with
    chf       : Id
    csgn      : Id
    ubsg      : Id
    csgnCall  : Id
    acbrc     : Id
  deriving (Eq, Show)

instrumentSetup : Scenario InstrumentSetup
instrumentSetup = do
  ps@PartySetup{..} <- partySetup
  cb <- getParty "CentralBank"

  let chf = Id with host = cb, label = "CHF", version = 0

  let csgn = Id with host = csd, label = "CSGN.S", version = 0
  submit csd do create EqStock with instrumentId = csgn, ccy = chf, obs = [pb]

  let ubsg = Id with host = csd, label = "UBSG.S", version = 0
  submit csd do create EqStock with instrumentId = ubsg, ccy = chf, obs = [pb]

  let csgnCall = Id with host = csd, label = "CH0002678435", version = 0
  submit csd do create EqOption with
                        instrumentId = csgnCall
                        underlying = csgn
                        optionType = Call
                        strike = 20.0
                        contractSize = 10.0
                        maturity = date 2019 Nov 23
                        obs = [pb]

  let acbrc = Id with host = csd, label = "OTC00145613251", version = 0
  submit csd do create EqACBRC with
                        instrumentId = acbrc
                        ccy = chf
                        notional = 100000.0
                        barrier = 0.65
                        barrierIsHit = False
                        fixingDates = [date 2019 Nov 17, date 2020 Feb 17, date 2020 May 17, date 2020 Aug 17, date 2021 Nov 17]
                        fixingIdx = 0
                        coupon = 0.03
                        underlying = ubsg
                        initialFixing = 12.0
                        obs = [pb]

  return InstrumentSetup with ..

lifecycleSetup = do
  ps@PartySetup{..} <- partySetup

  submit pb do create TradeStore.Interface with host = pb, nextId = 0

  reqCid <- submit pb do create LifecycleAgreementRequest with instrumentHost = csd, positionHost = pb
  submit csd do exercise reqCid LifecycleAgreement_Accept

  submit csd do create EqStockL.InstrumentLifecycle with instrumentHost = csd, positionHosts = [pb]
  submit csd do create EqOptionL.InstrumentLifecycle with instrumentHost = csd, positionHosts = [pb]
  submit csd do create EqACBRCL.InstrumentLifecycle with instrumentHost = csd, positionHosts = [pb]

example = do
  ps@PartySetup{..} <- partySetup
  instr@InstrumentSetup{..} <- instrumentSetup
  lifecycleSetup
  
  -- Some initial bookings
  let csgnPosRT = PositionId with host = pb, instrumentId = csgn, book = "001", counterParty = "IB"
  let csgnPosC = PositionId with host = pb, instrumentId = csgn, book = "001", counterParty = "Bob"

  let ubsgPosRT = PositionId with host = pb, instrumentId = csgn, book = "001", counterParty = "IB"
  let ubsgPosC = PositionId with host = pb, instrumentId = csgn, book = "001", counterParty = "Alice"

  let csgnCallPosC = PositionId with host = pb, instrumentId = csgnCall, book = "123", counterParty = "Alice"
  let csgnCallPosRT = PositionId with host = pb, instrumentId = csgnCall, book = "123", counterParty = "IB"

  let acbrcPosC = PositionId with host = pb, instrumentId = acbrc, book = "123", counterParty = "Bob"
  let acbrcPosRT = PositionId with host = pb, instrumentId = acbrc, book = "123", counterParty = "IB"

  submit pb do
    exerciseByKey @TradeStore.Interface pb Book with positionId = csgnPosC, quantity = 10000.0
    exerciseByKey @TradeStore.Interface pb Book with positionId = csgnPosRT, quantity = -10000.0
    
    exerciseByKey @TradeStore.Interface pb Book with positionId = csgnCallPosC, quantity = -10.0
    exerciseByKey @TradeStore.Interface pb Book with positionId = csgnCallPosRT, quantity = 10.0

    exerciseByKey @TradeStore.Interface pb Book with positionId = acbrcPosC, quantity = -1.0
    exerciseByKey @TradeStore.Interface pb Book with positionId = acbrcPosRT, quantity = 1.0

  -- -- Lifecycling
  -- -- (i) Stock
  -- submit csd do exerciseByKey @EqStockL.InstrumentLifecycle csd EqStockL.InstrumentLifecycle_StockSplit with instrumentId = csgn, ratio = 2.0
  -- submit pb do exerciseByKey @LifecyclePosition (pb, csgn) Lifecycle with positionId = csgnPosRT
  -- submit pb do exerciseByKey @LifecyclePosition (pb, csgn) Lifecycle with positionId = csgnPosC

  -- -- (ii) Option
  -- submit csd do exerciseByKey @EqOptionL.InstrumentLifecycle csd EqOptionL.InstrumentLifecycle_StockSplit with instrumentId = csgnCall, ratio = 2.0
  -- submit pb do exerciseByKey @LifecyclePosition (pb, csgnCall) Lifecycle with positionId = csgnCallPosRT

  -- -- (iii) ACBRC
  -- submit csd do exerciseByKey @EqACBRCL.InstrumentLifecycle csd EqACBRCL.InstrumentLifecycle_ObserveNextFixing with instrumentId = acbrc, fixing = 5.0
  -- submit pb do exerciseByKey @LifecyclePosition (pb, acbrc) Lifecycle with positionId = acbrcPosRT
  -- submit pb do exerciseByKey @LifecyclePosition (pb, acbrc) Lifecycle with positionId = acbrcPosC

  -- submit csd do exerciseByKey @EqACBRCL.InstrumentLifecycle csd EqACBRCL.InstrumentLifecycle_ObserveNextFixing with instrumentId = (acbrc with version = 1), fixing = 12.5
  -- submit pb do exerciseByKey @LifecyclePosition (pb, acbrc with version = 1) Lifecycle with positionId = acbrcPosRT with instrumentId = (acbrc with version = 1)
  -- submit pb do exerciseByKey @LifecyclePosition (pb, acbrc with version = 1) Lifecycle with positionId = acbrcPosC with instrumentId = (acbrc with version = 1)

  -- pure ()
