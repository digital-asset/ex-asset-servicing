module Init where

import Daml.Script
-- import DA.Date
-- import DA.Foldable
-- import DA.List (head)
import DA.Next.Set
import DA.Finance.Asset
import DA.Finance.Custody.Custody
-- import DA.Finance.Distribution.Distribution
-- import DA.Finance.Instrument.Equity.Option
import DA.Finance.Issuance.Issuance
import DA.Finance.Types
import DA.Text
import Roles

template InitDone
  with
    sender : Party
    receiver : Party
  where
    signatory sender
    observer receiver
    key sender : Party
    maintainer key

getAsset : Party -> Text -> Decimal -> (Id, Asset)
getAsset sig label quantity =
  let id = Id with signatories = fromList [sig]; label; version = 0
  in (id, Asset with ..)

getAccount : Party -> Text -> Party -> Party -> Account
getAccount sig label provider owner =
  let id = Id with signatories = fromList [sig]; label; version = 0
  in Account with ..

init : [Party] -> Script ()
init parties = do

  -- Parties
  let
    [ depository, agent, issuer, investor1, investor2, investor3 ] = parties
    [ dep, agt, iss, inv1, inv2, inv3 ] = [ "CSD", "AGENT", "ISSUER", "INVESTOR1", "INVESTOR2", "INVESTOR3" ]
  
  -- Roles
  let
    assetId = Id with signatories = fromList [ depository ]; label = "BMWG.DE"; version = 0
    investors = [ investor1, investor2, investor3 ]
    issuerAccountAtDepository = getAccount depository (iss <> "@" <> dep) depository issuer
    issuerAccountAtAgent = getAccount agent (iss <> "@" <> agt) agent issuer
    agentAccountAtDepository = getAccount depository (agt <> "@" <> dep) depository agent
    agentAccountAtAgent = getAccount agent (agt <> "@" <> agt) agent agent
    exerciseRuleProposal = WarrantExerciseRuleProposal with ..
  depositoryCid <- submit depository do createCmd Depository with ..
  issuerCid <- submit depository do createCmd Issuer with depositoryAccount = issuerAccountAtDepository; ..
  agentCid <- submit depository do createCmd Agent with ownAccount = agentAccountAtAgent; depositoryAccount = agentAccountAtDepository; ..
  exerciseRuleProposalCid <- submit depository do createCmd exerciseRuleProposal
  exerciseRuleCid <- submit issuer do exerciseCmd exerciseRuleProposalCid Accept

  -- Assets
  let
    eur = "EUR"
    bmw = "BMWG.DE"
    stockAssetId = Id with signatories = fromList [ depository ]; label = bmw; version = 0
    stockAsset = Asset with id = stockAssetId; quantity = 60_000.0
    stockAssetDeposit = AssetDeposit with asset = stockAsset; account = issuerAccountAtDepository; observers = fromList [ agent ]
    assetId = Id with signatories = fromList [ agent ]; label = eur; version = 0
    asset1 = Asset with id = assetId; quantity = 85_000.0
    asset2 = Asset with id = assetId; quantity = 170_000.0
    asset3 = Asset with id = assetId; quantity = 255_000.0
    asset11 = Asset with id = assetId; quantity = 500_000.0
    asset22 = Asset with id = assetId; quantity = 1_000_000.0
    asset33 = Asset with id = assetId; quantity = 1_500_000.0
    accountId1 = Id with signatories = fromList [ agent ]; label = (inv1 <> "@" <> agt); version = 0
    accountId2 = Id with signatories = fromList [ agent ]; label = (inv2 <> "@" <> agt); version = 0
    accountId3 = Id with signatories = fromList [ agent ]; label = (inv3 <> "@" <> agt); version = 0
    account1 = Account with id = accountId1; provider = agent; owner = investor1
    account2 = Account with id = accountId2; provider = agent; owner = investor2
    account3 = Account with id = accountId3; provider = agent; owner = investor3
    deposit1 = AssetDeposit with asset = asset1; account = account1; observers = empty
    deposit2 = AssetDeposit with asset = asset2; account = account2; observers = empty
    deposit3 = AssetDeposit with asset = asset3; account = account3; observers = empty
    deposit11 = AssetDeposit with asset = asset11; account = account1; observers = empty
    deposit22 = AssetDeposit with asset = asset22; account = account2; observers = empty
    deposit33 = AssetDeposit with asset = asset33; account = account3; observers = empty
  depositCid1 <- submit agent do createCmd deposit1
  depositCid2 <- submit agent do createCmd deposit2
  depositCid3 <- submit agent do createCmd deposit3
  cashDepositCid1 <- submit agent do createCmd deposit11
  cashDepositCid2 <- submit agent do createCmd deposit22
  cashDepositCid3 <- submit agent do createCmd deposit33
  issuerStockDepositCid <- submit depository do createCmd stockAssetDeposit

  -- -- Issuance

  let
    issueWarrant allocatedCode optionType strike exerciseType expiry issueSize step =
      let
        et = substring 0 1 $ show exerciseType
        label = "ISS-BMWG.DE-" <> show optionType <> "-" <> show strike <> "-" <> et <> "-" <> show expiry
        underlying = Id with signatories = fromList [ depository ]; label = bmw; version = 0
        contractSize = 100.0
        terms = WarrantTerms with ..
        minimumDenomination = 1000.0
        issuanceData = WarrantIssuanceData with ..
      in do
        issuanceRequestCid <- submit issuer do exerciseCmd issuerCid RequestWarrantIssuance with ..
        if step > 0 then do
          admissionCheckRequestCid <- submit agent do exerciseCmd agentCid RequestAdmissionCheck with ..
          let admissionCheck = AdmissionCheck with parties = True; product = True; legalDocs = True
          admissionCheckResponseCid <- submit depository do exerciseCmd depositoryCid HandleAdmissionCheck with ..
          if step > 1 then do
            codeAllocationRequestCid <- submit agent do exerciseCmd agentCid RequestCodeAllocation with ..
            codeAllocationResponseCid <- submit depository do exerciseCmd depositoryCid HandleCodeAllocation with ..
            if step > 2 then do
              globalNotesRequestCid <- submit agent do exerciseCmd agentCid RequestGlobalNotes with ..
              globalNotesResponseCid <- submit depository do exerciseCmd depositoryCid HandleGlobalNotes with success = True; ..
              if step > 3 then do
                (warrant, depositInstructionCid) <- submit depository do exerciseCmd depositoryCid HandleDepositInstruction with ..
                submit depository do exerciseCmd depositoryCid HandleIssuanceRequest with ..
                pure ()
              else
                pure ()
            else
              pure ()
          else
            pure ()
        else
          pure ()
  -- issueWarrant "XS1500887020" CALL 53.0 EUROPEAN (date 2021 Mar 21) 7000000.0 1
  -- issueWarrant "XS1500887021" PUT 62.0 AMERICAN (date 2023 Mar 21) 5000000.0 3
  -- issueWarrant "XS1500887022" PUT 52.0 EUROPEAN (date 2022 Mar 21) 8000000.0 2
  -- issueWarrant "XS1500887023" CALL 54.0 AMERICAN (date 2021 Mar 21) 12000000.0 3
  -- issueWarrant "XS1500887024" CALL 49.0 EUROPEAN (date 2024 Mar 21) 4000000.0 4

  -- -- Distribution
  -- let
  --   asset = Asset with id = (Id with signatories = fromList [ depository ]; label = allocatedCode, version = 0); quantity = 10_000_000.0
  --   price = Asset with id = (Id with signatories = fromList [ agent ]; label = eur, version = 0); quantity = 0.085

  -- distributionRequestCid <- submit issuer do exerciseCmd issuerCid RequestDistribution with label = "DIST-BMW-" <> allocatedCode; agentAccount = issuerAccountAtAgent; ..
  -- [ srCid1, srCid2, srCid3 ] <- submit agent do exerciseCmd distributionRequestCid RequestSubscription with ..
  -- sresCid1 <- submit investor1 do exerciseCmd srCid1 RespondSubscription with quantity = 1_000_000.0; depositCid = depositCid1
  -- sresCid2 <- submit investor2 do exerciseCmd srCid2 RespondSubscription with quantity = 2_000_000.0; depositCid = depositCid2
  -- sresCid3 <- submit investor3 do exerciseCmd srCid3 RespondSubscription with quantity = 3_000_000.0; depositCid = depositCid3
  -- let subscriptionResponseCids = [ sresCid1, sresCid2, sresCid3 ]
  -- (warrantCid, _) <- head <$> query @Warrant agent
  -- siCids1 <- submit agent do exerciseCmd distributionRequestCid InstructDistribution with ..
  -- forA_ siCids1 (\siCid -> submit depository do exerciseCmd siCid SettleInstruction)

  -- -- Exercise
  -- (warrantDepositCid, _) <- head <$> queryFilter @AssetDeposit agent (\ad -> ad.asset.id.label == allocatedCode)
  -- (warrantDepositCid1, _) <- head <$> queryFilter @AssetDeposit investor1 (\ad -> ad.asset.id.label == allocatedCode)
  -- (warrantDepositCid2, _) <- head <$> queryFilter @AssetDeposit investor2 (\ad -> ad.asset.id.label == allocatedCode)
  -- (warrantDepositCid3, _) <- head <$> queryFilter @AssetDeposit investor3 (\ad -> ad.asset.id.label == allocatedCode)
  -- ierCid1 <- submit investor1 do createCmd WarrantExerciseRequest with investor = investor1; quantity = 1_000_000.0; warrantDepositCid = warrantDepositCid1; cashDepositCid = cashDepositCid1; label = "EXER-BMW-" <> allocatedCode; ..
  -- ierCid2 <- submit investor2 do createCmd WarrantExerciseRequest with investor = investor2; quantity = 2_000_000.0; warrantDepositCid = warrantDepositCid2; cashDepositCid = cashDepositCid2; label = "EXER-BMW-" <> allocatedCode; ..
  -- ierCid3 <- submit investor3 do createCmd WarrantExerciseRequest with investor = investor3; quantity = 3_000_000.0; warrantDepositCid = warrantDepositCid3; cashDepositCid = cashDepositCid3; label = "EXER-BMW-" <> allocatedCode; ..
  -- let exerciseRequestCids = [ ierCid1, ierCid2, ierCid3 ]
  -- siCids2 <- submit agent do exerciseCmd exerciseRuleCid InstructWarrantExercise with ..
  -- forA_ siCids2 (\siCid -> submit depository do exerciseCmd siCid SettleInstruction)
  pure ()
