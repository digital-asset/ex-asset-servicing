module Init where

import Daml.Script
import DA.Next.Set
import DA.Finance.Issuance.Issuance
import DA.Finance.Types

template InitDone
  with
    sender : Party
    receiver : Party
  where
    signatory sender
    observer receiver
    key sender : Party
    maintainer key

getAsset : Party -> Text -> Decimal -> (Id, Asset)
getAsset sig label quantity =
  let id = Id with signatories = fromList [sig]; label; version = 0
  in (id, Asset with ..)

getAccount : Party -> Text -> Party -> Party -> Account
getAccount sig label provider owner =
  let id = Id with signatories = fromList [sig]; label; version = 0
  in Account with ..

init : Script ()
init = do
  -- Parties
  depository <- allocatePartyWithHint "CSD" $ PartyIdHint with partyIdHint = "CSD"
  agent <- allocatePartyWithHint "BANK" $ PartyIdHint with partyIdHint = "BANK"
  issuer <- allocatePartyWithHint "CORP" $ PartyIdHint with partyIdHint = "CORP"

  let account = getAccount depository "CORP@CSD" depository issuer
  submit depository do createCmd Depository with ..
  submit depository do createCmd Issuer with ..
  submit depository do createCmd Agent with ..

  pure ()
