daml 1.2
module Lifecycle.Position where

import TradeStore.Interface as TradeStore
import TradeStore.Position
import Types

template LifecyclePosition
  with
    positionHost  : Party
    instrumentId  : Id
    outcome       : [(Id, Decimal)]
  where
    signatory positionHost
    key (positionHost, instrumentId) : (Party, Id)
    maintainer key._1

    controller positionHost can
      nonconsuming Lifecycle: ()
        with
          positionId: PositionId
        do
          (positionCid, position) <- fetchByKey @Position positionId
          assertMsg "position host matches" $ position.positionId.host == positionHost
          assertMsg "instrumentId matches" $ position.positionId.instrumentId == instrumentId

          -- Book out old position
          exerciseByKey @TradeStore.Interface positionHost Book with
            positionId
            quantity = -(position.quantity)

          -- Book in new positions
          mapA (\(instrumentIdNew, ratio) -> 
                  exerciseByKey @TradeStore.Interface positionHost Book with
                    positionId = positionId with instrumentId = instrumentIdNew
                    quantity = ratio * position.quantity
               ) outcome
          
          return ()
